в общем, пока тебе можно почитать базовые вещи про ООП. Всё остальное прийдёт с опытом. Но ты должен знать:
1) что такое ооп? зачем оно нужно? как оно используется? как проектировать программы с ООП
2) какие 3 базовых приниципа ооп и что это такое (наследование, полиморфизм, инкапсуляция)
3) что такое классы
4) что такое объект
5) отличия между классом и объектом
6) что такое модификаторы доступа - private, public и другие. Какие вообще бывают, когда какой из них нужно использовать
7) что такое виртуальная функция? что такое чистая виртуальная функция?
8) что такое таблица виртуальных функций
9) что такое статический метод. чем он отличается от нестатического метода
10) что такое статический класс? чем он отилчается от нестатического)
11) что такое конструктор? как его вызывать
12) что такое деструктор? как его вызывать
13) чем отличается структура от класса?
14) что такое абстрактный класс? зачем он нужен? как создать
15) Что такое RAII. Как использовать и зачем?
16) что такое геттеры и сеттеры? зачем они нужны? как это связано с инкапсуляцией
17) композиция вместо наследования - узнать что это

Переделать вопрос по классу, написать лучше Вопрос 3).

3) нужны примеры кода
2) какие 3 базовых приниципа ооп и что это такое (наследование, полиморфизм, инкапсуляция)
тут надо дать краткие определения, и на примере с++ пояснить каждый принцип
3) что такое класс
просто дать краткое определение, не привязанное к языку с++.
создать простой класс с парой полей (!!!!!!!! это не переменные а fields, и парой методов)
4) что такое объект
понятное краткон определение в 2-3 предложения + пример, можно использовать класс из ответа 3
5) отличия между классом и объектом
тут просто базовые вещи, без кода. но кратко, 3-4 предложения
максимум
6) что такое модификаторы доступа - private, public и другие. Какие вообще бывают, когда какой из них нужно использовать
по 1 предложению на каждый модификатор + пример
7) что такое виртуальная функция? что такое чистая виртуальная функция?
2-3 предложения - определения + подробные примеры
8) что такое таблица виртуальных функций
3-4 предложения
без кода
9) что такое статический метод. чем он отличается от нестатического метода
2-3 предложения + пример
10) что такое статический класс? чем он отилчается от нестатического)
2-3 предложения
11) что такое конструктор? как его вызывать
1 предложение + пример
12) что такое деструктор? как его вызывать
1 предложение + пример
13) чем отличается структура от класса?
2 предложения
14) что такое абстрактный класс? зачем он нужен? как создать
2-3 предложения + пример
15) Что такое RAII. Как использовать и зачем?
2-3 предлоежения + пример
16) что такое геттеры и сеттеры? зачем они нужны? как это связано с инкапсуляцией
1-2 предложения + пример
17) Абстрактный класс
18) Виртуальный деструктор
19) Scope operator ::


ООП программы должны писаться по принципу "сверху-вниз".
интересно, кому они должны
--
Абстракция данных - Каждому классу и, соответственно, объекту придаются какие-то особые состояния, характеристики, переменные, методы. Это отличает каждый тип объекта от всех остальных, что и является самым важным принципом ООП - разделение на объекты.
это какая-то дрянь, я уже говорил об этом
в ООП 3 базовых принципа
а это я не знаю что такое
---
в Полиморфизм неверный пример
----
Инкапсуляция - это сокрытие деталей реализации в классе. Доступ к необходимым данным предоставлен через интерфейс.
это видимо копипаста откуда-то, у тебя в примере нет никакого интерфейса, интерфейсы - эт вообще не про с++
-----
Существуют классы 3 видов:
структуры - это не подвид классов
это просто сущность языка
очень похожая на классы ( в с++)
в других языках они очень сильно отличаются
в c# - самый яркий пример
интерфейс - это строго определенная вещь, определенная во многих языках. Джава, Шарп
Forwarded messages
в твоём случае, ты можешь определить функции, которые входят в интфрейс класса
но в с++ интерфейс - это не сущность языка
ну у них много названий
методы доступа, методы, публичные методы
просто вот
если человек знает java
он подумает, что в с++ есть в явном виде интерфейс
а в с++ интерфейс есть, но лишь в головах разработчика
не знаю, читал ты или нет
в с++ можно класс разбить на 2 части
.h файл
и .cpp файл
вот это тоже погляди
и вот в .h файле описыаются методы класса
а их реализация - в .cpp файле (или аналоге)
бывают правда классы, полностью определенные в .h файле (или аналоге)
это те самые хедер-библиотеки
смысл - несколько плюсов
1) быстрее компиляция
2) другие разработчики смотрят только .h файл - интерфейс класса, и не запутываются в реализации класса
опять же, есть библиотеки, которые полностью написаны в .h файлах (например boost)
чтобы писать об этом, это надо понимать)
----
ты пиешь про union
но я чувствую что ты не понимаешь вообще что это такое
в твоём начальном введение
я бы посоветовал оставить только
структуры и классы
и не запудривать себе и другим мозг
---
Объект - это переменная, которые полностью копируют класс, типом которого они являтся. Когда объявляется класс, на него не выделяется памяти, в нем нельзя хранить данные. Для того, чтобы это стало возможно, требуется создать переменную, типом которой является данный класс. Данная переменная и будет являться объектом. Функционал объекта полностью ограничен самим функционалом класса.
это прям не очень(
типо, не понятно, на каком языке ты разговариваешь
техническом или теоретическом
если техническим, что за термины - "копирует"
ну в общем
перепиши это нормально


int main () {
Base* baseptr;
Derived derivedptr;
в примере с виртуальными функциями
ты как ебло
сделал течку утечку
памяти
напоминаю, в нормальных вузах
утечка памяти - это
 Dima
Dima
yesterday at 9:27 pm
это нужное конечно
 Maxim
Maxim
yesterday at 9:30 pm
-1 попытка сдачи
а их у тебя 2-3
Таблица виртуальных функций
тут
что я бы хотел видеть как читатель
пример таблицы наверное
ну или
какой-то пример
наглядный
типо, вот так примерно это выглядит
а второе
если ты говоришь
поддерживают Runtime полиморфизм.
то
я хочу знать
"хм, есть *** полиморфизм, а есть другие?"
и тут я понимаю
что какая-то недосказанность
я хочу

Ad hoc polymorphism - Wikipedia
en.wikipedia.org
кратенько
 Dima
Dima
yesterday at 9:30 pm
для всего полиморфизм???
он для операторов
функций
бывет
и еще чето
 Maxim
Maxim
yesterday at 9:30 pm
просто, что это такое
в двух словах
 Dima
Dima
yesterday at 9:30 pm
ааа
ок
 Maxim
Maxim
yesterday at 9:32 pm
если потом ещё напишешь
зачем делают классы в хедерах
зачем разбивают
и тд
тож збс
аа
ещё забыл
там где у тебя будут деструкторы
вопрос про него
расскажи пожалуйста
что такое virtual destructor
и зачем он нужен